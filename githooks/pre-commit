#!/bin/sh

STAGED_GO_FILES=$(git diff --cached --name-only | grep ".go$")

if [[ "$STAGED_GO_FILES" = "" ]]; then
  exit 0
fi

GOLINT=$GOPATH/bin/golint
GOIMPORTS=$GOPATH/bin/goimports

# Check for golint
if [[ ! -x "$GOLINT" ]]; then
  printf "\t\033[41mPlease install golint\033[0m (go get -u golang.org/x/lint/golint)"
  exit 1
fi

# Check for goimports
if [[ ! -x "$GOIMPORTS" ]]; then
  printf "\t\033[41mPlease install goimports\033[0m (go get golang.org/x/tools/cmd/goimports)"
  exit 1
fi

# Make sure the code passes "go vet".
go vet ./...
if [[ $? != 0 ]]; then
  printf "\t\033[31mgo vet\033[0m \033[0;30m\033[41mFAILURE!\033[0m\n"
  exit 1
fi

# Make sure the code compiles
GO111MODULE=on go build -o /dev/null ./...
if [[ $? != 0 ]]; then
	echo "\t\033[31mgo build\033[0m \033[0;30m\033[41mFAILURE!\033[0m\n"
	exit 1
fi

# Make sure the unit tests pass
GO111MODULE=on go test -v ./...
if [[ $? != 0 ]]; then
	echo "\t\033[31mgo test\033[0m \033[0;30m\033[41mFAILURE!\033[0m\n"
	exit 1
fi

PASS=true

for FILE in $STAGED_GO_FILES
do
  # Run goimports on the staged file
  $GOIMPORTS -w $FILE

  # Run golint on the staged file and check the exit status
  $GOLINT "-set_exit_status" $FILE
  if [[ $? == 1 ]]; then
    printf "\t\033[31mgolint $FILE\033[0m \033[0;30m\033[41mFAILURE!\033[0m\n"
    PASS=false
  else
    printf "\t\033[32mgolint $FILE\033[0m \033[0;30m\033[42mpass\033[0m\n"
  fi
done

if ! $PASS; then
  printf "\033[0;30m\033[41mCOMMIT FAILED\033[0m\n"
  exit 1
else
  printf "\033[0;30m\033[42mCOMMIT SUCCEEDED\033[0m\n"
fi

exit 0
